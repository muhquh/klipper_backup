######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.
# Pretty hacky way to do it, but it works. Better way would probably be to pass filament type as a variable.

[gcode_macro ADJUSTPA]
gcode:
#nozzle size
    #0.4mm
    {% if printer["gcode_macro PRINT_START"].nozzle|float == 0.4 %}
        #ABS
        {% if printer["gcode_macro PRINT_START"].filament|string == "ABS" %}
          SET_PRESSURE_ADVANCE ADVANCE=0.04
         #ASA
        {% elif printer["gcode_macro PRINT_START"].filament|string == "ASA" %}
          SET_PRESSURE_ADVANCE ADVANCE=0.04
        #PLA
        {% elif printer["gcode_macro PRINT_START"].filament|string == "PLA" %}
          SET_PRESSURE_ADVANCE ADVANCE=0.035
        #Catch-all
        {% else %}
          SET_PRESSURE_ADVANCE ADVANCE=0.055
        {% endif %}
    #0.6mm
    {% elif printer["gcode_macro PRINT_START"].nozzle|float == 0.6 %}
        #ABS
        {% if printer["gcode_macro PRINT_START"].filament|string == "ABS" %}
          SET_PRESSURE_ADVANCE ADVANCE=0.00
        #PLA
        {% elif printer["gcode_macro PRINT_START"].filament|string == "PLA" %}
          SET_PRESSURE_ADVANCE ADVANCE=0.009
        #Catch-all
        {% else %}
          SET_PRESSURE_ADVANCE ADVANCE=0.00
        {% endif %}
    #Catch-all
    {% else %}
          SET_PRESSURE_ADVANCE ADVANCE=0
    {% endif %}


    
######################### PRINT START / END #########################

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
variable_nozzle: 0
variable_filament: 0
gcode:      
    # Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set filament = params.FILAMENT|default(ABS)|string %}
    {% set nozzle = params.NOZZLE|default(0)|float %}

    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend} 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=filament VALUE='"{filament}"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=nozzle VALUE={nozzle}   

    ADJUSTPA                                                                          ; change PA based on bed temp
    #UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0                                       ; cancel exhaust off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                       ; cancel off timer (if there is one)
    #SET_PIN PIN=caselight VALUE=1                                                        ; turn on case light
    RESETSPEEDS                                                                          ; reset speed, accel etc to configured values
    #RESETRGB                                                                             ; reset LCD RGB
    M104 S140                                                                            ; set hotend to no-ooze temp
    M140 S{bed}                                                                          ; set bed to target temp
    {% if filament == "PLA" %}
      M190 S{bed}
    {% endif %}
    G28                                                                                  ; home
    G90                                                                                  ; absolute positioning
    {% if (filament == "ABS") or (filament == "ASA") %}
      {% if printer["temperature_sensor chamber"].temperature < chamber %}                 ; - if chamber is not at temp yet:
          HEATSOAK T={bed} MOVE=1                                                          ;   heatsoak macro + park in center
          M190 S{bed}                                                                      ;   wait for bed final temp
          TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}           ;   wait for chamber final temp
      {% else %}                                                                           ; - if chamber is already at temp:
          {% if printer.heater_bed.temperature < (bed-2) %}                                ; -- but bed is not fully heated (within 2C):
              HEATSOAK T={bed} MOVE=1                                                      ;       heatsoak and park
              M190 S{bed}                                                                  ;       wait for bed final temp
          {% else %}                                                                       ; -- and bed is already heated:
              HEATSOAK T={bed} MOVE=0                                                      ;       "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
          {% endif %}
      {% endif %}
    {% else %}
    #do nothing
    {% endif %}
    M106 S0                                                                              ; turn off part cooling fan (from heatsoak)
    BED_MESH_CLEAR                                                                       ; clear bed mesh
    ATTACH_PROBE_LOCK                                                                    ; attach klicky + lock
    QUAD_GANTRY_LEVEL                                                                    ; quad gantry level
    G28 Z                                                                                ; home z
    G90                                                                                  ; absolute positioning
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500  ; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
    BED_MESH_CALIBRATE                                                                   ; mesh
    G28 Z                                                                                ; home z again
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z
    DOCK_PROBE_UNLOCK                                                                    ; stow probe, unlock
    G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500                                ; move to right of nozzle brush
    M109 S{hotend}                                                                       ; set & wait for hotend final temp
    CLEAN_NOZZLE                                                                          ; clean nozzle while hot
    CALIBRATE_Z                                                                          ; calibrate z offset with hot nozzle
    #SWIPENOZZLE                                                                          ; swipe nozzle brush on way to print purge line
    {% if filament == "ABS" %}
      SET_FAN_SPEED FAN=filter SPEED=0.65                                                 ; set chamber fan to 10%
        {% else %}
    #do nothing
    {% endif %}
    G92 E0                                                                               ; reset Extruder
    G1 X2 Y20 Z0.3 F19500.0                                                              ; move to start position
    G1 X2 Y200.0 Z0.3 F1500.0 E15                                                        ; draw the first line
    G92 E0                                                                               ; reset Extruder
    G1 Z2.0 F3000                                                                        ; move Z Axis up
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1


# GCode Macro: END_PRINT
# Add END_PRINT in your slicers ending script
# ================================================================================
[gcode_macro PRINT_END]
gcode:
    G92 E0                                                                               ; zero the extruder
    G1 E-15 F3000                ; retract filament
    #RESETRGB                                                                             ; revert LCD RGB
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
    CLEAR_PAUSE                                                                          ; clear pause (from M191) if there is one
    {% if printer.heater_bed.temperature >= 90 %}                                       
        SET_FAN_SPEED FAN=filter SPEED=1                                                ; crank exhaust fan to 100% to evacuate chamber
    {% endif %}                                                 
    M400                                                                                 ; wait for buffer to clear
    M104 S0                                                                              ; turn only the hotend off
    #M140 S{printer["gcode_macro PRINT_START"].bedtemp|int}                               ; return the bed to temp, some slicers like to turn it off
    M140 S0                               ; return the bed to temp, some slicers like to turn it off
    M107                                                                                 ; turn off part cooling fan
    G91                                                                                  ; relative positioning
    G1 Z5 F3000                                                                          ; move nozzle up 5mm
    G90                                                                                  ; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0    ; park nozzle at rear
    BED_MESH_CLEAR                                                                       ; clear bed mesh                                    
    UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=120                                     ; turn exhaust off in 2 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600                                     ; turn everything off in 10 min
    RESETSPEEDS                                                                          ; reset speed, accel etc to configured max values
    #SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0                                       ; disable XYE steppers (not z)
    #SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    #SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    BEEP I=3                                                                             ; beep 3 times


#--------------------------------------------------------------------

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

# Filament runout / change alias	
[gcode_macro M600]
gcode:
	PAUSE

######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F600                           ; extrude a little to soften tip 
	G1 E-100 F1800                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83 ; set extruder to relative
	G1 E90 F300
	RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    UNLOAD_FILAMENT
	
[gcode_macro HOT_LOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    LOAD_FILAMENT

######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PARKORIGIN]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_minimum.y} Z0 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED
	
######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}

#####################################################################
#   QGL
#####################################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##  Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32
   
[gcode_macro RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 


[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(110)|int %}
    {% set move = params.MOVE|default(1)|int %}

	SAVE_GCODE_STATE NAME=HEATSOAK
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
    SET_FAN_SPEED FAN=filter SPEED=1               ; turn off exhaust fan
    #SET_PIN PIN=caselight VALUE=1                   ; turn on case light
    M140 S{t}                                       ; heat bed
    {% if t >= 100 %}
        M104 S180                                   ; set hotend to no-ooze temp
        M106 S205                                   ; turn on part fan (80%)
    {% else %}
        M106 S0                                     ; turn part fan off
    {% endif %}
    {% if move == 1 %}
        CG28
		G90
		G0 Z{printer.toolhead.axis_maximum.z/2} F19500    
		G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500    
    {% endif %}
	RESTORE_GCODE_STATE NAME=HEATSOAK

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    SET_FAN_SPEED FAN=filter SPEED=0    ; turn exhaust fan off

[delayed_gcode DELAYED_OFF]
gcode:
    OFF ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)

[delayed_gcode EXHAUST_OFF]
gcode:
    SET_FAN_SPEED FAN=filter SPEED=0




# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}